version: 2.1
workflows:
  build-deploy:
    jobs:
      - dev-version
      - publish:
          requires:
            - dev-version
          filters:
            branches:
              only: master

jobs:
  dev-version:
    docker:
      - image: circleci/node:10
    working_directory: ~/repo
    steps:
      - checkout
      - install-circleci
      - run:
          name: Pack, Validate, and Publish
          command: |
            circleci config pack src/ > packed.yml
            circleci orb validate packed.yml --token ${CIRCLECI_API_KEY}
            PUBLISH_MESSAGE=`circleci orb publish packed.yml circleci/jira@dev:${CIRCLE_BRANCH}-${CIRCLE_SHA1} --token ${CIRCLECI_API_KEY}`
            echo $PUBLISH_MESSAGE
            ORB_VERSION=$(echo $PUBLISH_MESSAGE | sed -n 's/Orb `\(.*\)` was published.*/\1/p')
            echo "export ORB_VERSION=\"${ORB_VERSION}\"" >> $BASH_ENV
            echo $ORB_VERSION
      - install-bats
      - run:
          name: Test against published dev version using BATS
          command: |
            export BATS_IMPORT_DEV_ORB="circleci/jira@dev:${CIRCLE_BRANCH}-${CIRCLE_SHA1}"
            bats tests
      - run:
          name: Publish Dev version to PR
          command: |
            if [ "$CIRCLE_PR_NUMBER" != "" ];then
              echo "PR_NUMBER is ${CIRCLE_PR_NUMBER}"
            else
              CIRCLE_PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | sed -n 's/.*\/pull\/\([0-9]*\)/\1/p')
              if [ "$CIRCLE_PR_NUMBER" == "" ];then
                echo "No pr found, do nothing"
                exit 0
              fi
            fi
            curl -X POST -u cpe-bot:${GHI_TOKEN} "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/issues/${CIRCLE_PR_NUMBER}/comments" -d "{\"body\":\"Dev version of orb available for testing - \`${ORB_VERSION}\`\"}"

  publish:
    docker:
      - image: circleci/node:10
    working_directory: ~/repo
    steps:
      - checkout
      - install-circleci
      - run:
          name: Promote to prod
          command: |
            # this repo uses squash commits with PR in tparens i,e. "blah blah (#21)"
            PR_NUMBER=`git log -1 --pretty=%B | sed -n 's/.*(#\([0-9]*\)).*/\1/p'`
            echo "PR_NUMBER is ${PR_NUMBER}"
            if [ "$PR_NUMBER" == "" ];then
              echo "No pr found, do nothing"
              exit 1
            fi
            SEMVER_INCREMENT=`git log -1 --pretty=%B | sed -En 's/.*\[semver:(major|minor|patch|skip)\].*/\1/p'`
            if [ -z ${SEMVER_INCREMENT} ];then
              echo "Merge commit did not indicate which SemVer increment to make. Please ammend commit with [semver:FOO] where FOO is major, minor, or patch"
              exit 1
            elif [ "$SEMVER_INCREMENT" == "skip" ];then
              echo "SEMVER in commit indicated to skip orb release"
              echo "export PR_MESSAGE=\"BotComment: Orb publish was skipped due to [semver:skip] in commit message.\""  >> $BASH_ENV
              exit 0
            else
              PUBLISH_MESSAGE=`circleci orb publish promote circleci/jira@dev:${CIRCLE_BRANCH}-${CIRCLE_SHA1} ${SEMVER_INCREMENT} --token ${CIRCLECI_API_KEY}`            
              echo $PUBLISH_MESSAGE
              ORB_VERSION=$(echo $PUBLISH_MESSAGE | sed -n 's/Orb .* was promoted to `\(.*\)`.*/\1/p')
              echo "export PR_MESSAGE=\"BotComment: *Production* version of orb available for use - \\\`${ORB_VERSION}\\\`\"" >> $BASH_ENV
            fi
      - run:
          name: Publish Prod version to PR
          command: |
            curl -X POST -u cpe-bot:${GHI_TOKEN} "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/issues/${PR_NUMBER}/comments" -d "{\"body\":\"${PR_MESSAGE}\"}"

commands:
  install-bats:
    description: installs the BATS bash testing tool
    steps:
      - run:      
          name: Install BATS (bash testing)
          command: |
            cd /tmp && git clone https://github.com/bats-core/bats-core.git && cd bats-core
            sudo ./install.sh /usr/local
      - run:
          name: Install YQ
          command: |
            curl -L https://github.com/mikefarah/yq/releases/download/2.1.1/yq_linux_amd64 -o yq
            chmod a+x yq
            sudo mv yq /usr/local/bin/
  install-circleci:
    description: installs the new CIrcleCI CLI with orb support
    steps:
      - run: 
          name: Install CircleCI CLI (the new one)
          command: |
            #curl https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh --fail --show-error | sudo bash
            curl -L https://github.com/CircleCI-Public/circleci-cli/releases/download/v0.1.3139/circleci-cli_0.1.3139_linux_amd64.tar.gz -o /tmp/cli.tar.gz
            tar -xzf /tmp/cli.tar.gz -C /tmp
            chmod a+x /tmp/circleci-cli_0.1.3139_linux_amd64/circleci
            sudo mv /tmp/circleci-cli_0.1.3139_linux_amd64/circleci /usr/local/bin
            circleci version
            echo "Run circleci help"              
            circleci help
            echo -e "token: ${CIRCLECI_API_KEY}\nverbose: false" > ~/.circleci/cli.yml
