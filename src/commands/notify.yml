parameters:
  token_name:
    description: The name of environment variable containing CircleCI API Token. Required for all projects.
    default: "CIRCLE_TOKEN"
    type: string
  job_type:
    description: Indicates if job should be treated as build or deployment in Jira dev panel. Note that Deployments require additional details
    default: "build"
    type: enum
    enum: ["build", "deployment"]
  environment:
    description: For deployments. Indicates the name of target environment. Default is the CircleCI Job Name.
    default: "${CIRCLE_JOB}"
    type: string
  environment_type:
    description: Indicates the category of target environment as defined by Atlassian
    type: enum
    enum: ["production", "staging", "testing", "development", "unmapped"]
    default: "development"
  state_path:
    description: Relative or absolute path to a store build state for orb.
    default: "/tmp/circleci-orb-jira.status"
    type: string
  service_id:
    description: Specify the JSD service ID for the project this notification targets.
    type: string
    default: ''
  issue_regexp:
    description: Override the default project key regexp if your project keys follow a different format.
    default: "[A-Z]{2,30}-[0-9]+"
    type: string
  override_status:
    description: |
      Use this to send a fixed status when deeper insight than success/fail is desired.
      Examples: 1) Use at the start of LONG jobs to send a "in_progress" status to Jira.
      2) Use as the final step before an approval job to send a "pending"
    default: "actual"
    enum: ["pending", "in_progress", "successful", "failed", "cancelled", "unknown", "actual"]
    type:  enum

steps:
  - jq/install

  - run:
      name: JIRA - Setting Failure Condition
      command: |
        echo 'JIRA_BUILD_STATUS="failed"' > <<parameters.state_path>>
      when: on_fail

  - run:
      name: JIRA - Setting Success Condition
      command: |
        echo 'JIRA_BUILD_STATUS="successful"' > <<parameters.state_path>>
      when: on_success

  - run:
      when: always
      name: Update status in Atlassian Jira
      command: |
        : ${<<parameters.token_name>>:?"Please provide a CircleCI API token for this orb to work!"} >&2
        if [[ $(echo $CIRCLE_REPOSITORY_URL | grep github.com) ]]; then
          VCS_TYPE=github
        else
          VCS_TYPE=bitbucket
        fi

        run () {
          verify_api_key
          parse_jira_key_array
          load_workflow_state
          HAS_JSD_SERVICE_ID="<< parameters.service_id >>"
            # If you have either an issue key or a service ID
          if [[ -n "${ISSUE_KEYS}" || -n "${HAS_JSD_SERVICE_ID}" ]]; then
            if [[ "<<parameters.job_type>>" == "deployment" ]];then
              #deployments always send pipeline build success.
              echo "This job is a deployment, the orb will notify Jira that any pedning build was successful"
              export JIRA_BUILD_STATUS="successful"
              generate_json_payload_build
              post_to_jira "build"
            fi
            generate_json_payload_<<parameters.job_type>>
            post_to_jira
          else
            # If no service is or issue key is found.
            echo "No Jira issue keys found in commit subjects or branch name, skipping."
            echo "No service ID selected. Please add the service_id parameter for JSD deployments."
            exit 0
          fi
        }

        verify_api_key () {
          URL="https://circleci.com/api/v2/me"
          fetch $URL /tmp/me.json
          jq -e '.name' /tmp/me.json
        }

        fetch () {
          URL="$1"
          OFILE="$2"
          RESP=$(curl -w "%{http_code}" -s <<# parameters.token_name >> --user "${<<parameters.token_name>>}:" <</parameters.token_name>> \
          -o "${OFILE}" \
          "${URL}")

          echo "${RESP}:${URL}"
          if [[ "$RESP" != "20"* ]]; then
            echo "Curl failed with code ${RESP}. full response below."
            cat $OFILE
            exit 1
          fi
        }

        parse_jira_key_array () {
          # must save as ISSUE_KEYS='["CC-4"]'
          fetch https://circleci.com/api/v1.1/project/${VCS_TYPE}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BUILD_NUM} /tmp/job_info.json
          # see https://jqplay.org/s/TNq7c5ctot
          ISSUE_KEYS=$(cat /tmp/job_info.json | jq '[.all_commit_details[].subject | scan("(<<parameters.issue_regexp>>)")   | .[] ] + [.all_commit_details[].branch | scan("(<<parameters.issue_regexp>>)")   | .[] ] + [.branch | scan("(<<parameters.issue_regexp>>)")  | . [] ]')
          if [ -z "$ISSUE_KEYS" ]; then
            # No issue keys found.
            echo "No issue keys found. This build does not contain a match for a Jira Issue. Please add your issue ID to the commit message or within the branch name."
            exit 0
          fi
        }

        load_workflow_state () {
          source <<parameters.state_path>>
          URL="https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}"
          fetch $URL /tmp/workflow.json
          export WORKFLOW_STATUS=$(jq -r '.status' /tmp/workflow.json)
          export CIRCLE_PIPELINE_NUMBER=$(jq -r '.pipeline_number' /tmp/workflow.json)
          echo "This job is ${JIRA_BUILD_STATUS}, however another job in workflow is ${WORKFLOW_STATUS}"

          if [ "actual" != "<<parameters.override_status>>" ];then
            echo "Override parameter present on orb. Setting status to: <<parameters.override_status>>"
            export JIRA_BUILD_STATUS="<<parameters.override_status>>"
            return
          fi


          if [ "$JIRA_BUILD_STATUS" == "failed" ];then
            # no need to waste time figruging out where we are, it rboke.
            export JIRA_BUILD_STATUS="failed"
            break
          fi

          # deployments are special, cause they pass or fail alone.
          if [ "deployment" == "<<parameters.job_type>>" ]; then
            export JIRA_BUILD_STATUS=${JIRA_BUILD_STATUS}
            break
          fi

          # All normal jobs must respect status of workflow. These are the possible "active" oens
          case $WORKFLOW_STATUS in
            "fail"*)
              export JIRA_BUILD_STATUS="failed"
              ;;
            "error")
              export JIRA_BUILD_STATUS="failed"
              ;;
            "cancel"*)
              #workflow is waiting on manual approval
              export JIRA_BUILD_STATUS="cancelled"
              ;;
            *)
              #workflow is not over, but this may r may not be final job
              get_dependent_job_status
              ;;
          esac
          
          echo "Status set to ${JIRA_BUILD_STATUS}"
        }

        # return 'pending' if any dependet job is approval, else 'in_progress'
        get_dependent_job_status () {
          source <<parameters.state_path>>
          OUTCOME_STATUS=${JIRA_BUILD_STATUS}
          URL="https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/job"
          fetch $URL /tmp/workflow_jobs.json
          MY_ID=$(jq --argjson jobnum ${CIRCLE_BUILD_NUM} '.items[] | select(.job_number == $jobnum) | .id' /tmp/workflow_jobs.json)
          # given workflow and job =number we get uuid, and then iterate workflow to find any jobs stating us as dependency.
          echo "Checking where job with ID: ${MY_ID} fits in larger workflow."
          DEP_JOBS=$(jq -r --argjson jobid ${MY_ID} '.items[] | select(.dependencies[] | contains($jobid)) | .id' /tmp/workflow_jobs.json)
          BLOCKED_JOBS=$(jq -r '.items[] | select(.status == "blocked").id' /tmp/workflow_jobs.json)

          if [ "x${BLOCKED_JOBS}" != "x" ];then
            # there are jobs in the workflow yet to run, override status
            echo "Downstream jobs found, overriding job status to workflow in_progress"
            OUTCOME_STATUS="in_progress"
          fi

          for job in ${DEP_JOBS};do
            TYPE=$(jq -r --arg jobid "${job}" '.items[] | select(.id == $jobid) | .type' /tmp/workflow_jobs.json)
            STATUS=$(jq --arg jobid "${job}" '.items[] | select(.id == $jobid) | .status' /tmp/workflow_jobs.json)
            echo "Job ${job} of type ${TYPE} depends on current, shows status: ${STATUS}"
            if [ "$TYPE" == "approval" ];then
              echo "Downstream job is approval, mark workflow pending."
              # waiting on manual apporval, indicate that
              OUTCOME_STATUS="pending"
              break
            fi
          done
          export JIRA_BUILD_STATUS=$OUTCOME_STATUS
        }



        generate_json_payload_build () {
          iso_time=$(date '+%Y-%m-%dT%T%z'| sed -e 's/\([0-9][0-9]\)$/:\1/g')
          echo {} | jq \
          --arg time_str "$(date +%s)" \
          --arg lastUpdated "${iso_time}" \
          --arg pipelineNumber "${CIRCLE_PIPELINE_NUMBER}" \
          --arg projectName "${CIRCLE_PROJECT_REPONAME}" \
          --arg state "${JIRA_BUILD_STATUS}" \
          --arg jobName "${CIRCLE_JOB}" \
          --arg buildNumber "${CIRCLE_BUILD_NUM}" \
          --arg url "${CIRCLE_BUILD_URL}" \
          --arg workflowUrl "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}" \
          --arg commit "${CIRCLE_SHA1}" \
          --arg refUri "${CIRCLE_REPOSITORY_URL}/tree/${CIRCLE_BRANCH}" \
          --arg repositoryUri "${CIRCLE_REPOSITORY_URL}" \
          --arg branchName "${CIRCLE_BRANCH}" \
          --arg workflowId "${CIRCLE_WORKFLOW_ID}" \
          --arg repoName "${CIRCLE_PROJECT_REPONAME}" \
          --arg display "${CIRCLE_PROJECT_REPONAME}"  \
          --arg description "${CIRCLE_PROJECT_REPONAME} #${CIRCLE_BUILD_NUM} ${CIRCLE_JOB}" \
          --argjson issueKeys "${ISSUE_KEYS}" \
          '
          ($time_str | tonumber) as $time_num |
          {
            "builds": [
              {
                "schemaVersion": "1.0",
                "pipelineId": $projectName,
                "buildNumber": $pipelineNumber,
                "updateSequenceNumber": $time_str,
                "displayName": $display,
                "description": $description,
                "url": $workflowUrl,
                "state": $state,
                "lastUpdated": $lastUpdated,
                "issueKeys": $issueKeys
              }
            ]
          }
          ' > /tmp/jira-status.json
        }

        generate_json_payload_deployment () {
          echo "Update Jira with status: ${JIRA_BUILD_STATUS} for ${CIRCLE_PIPELINE_NUMBER}"
          iso_time=$(date '+%Y-%m-%dT%T%z'| sed -e 's/\([0-9][0-9]\)$/:\1/g')
          echo {} | jq \
          --arg time_str "$(date +%s)" \
          --arg lastUpdated "${iso_time}" \
          --arg state "${JIRA_BUILD_STATUS}" \
          --arg buildNumber "${CIRCLE_BUILD_NUM}" \
          --arg pipelineNumber "${CIRCLE_PIPELINE_NUMBER}" \
          --arg projectName "${CIRCLE_PROJECT_REPONAME}" \
          --arg url "${CIRCLE_BUILD_URL}" \
          --arg commit "${CIRCLE_SHA1}" \
          --arg refUri "${CIRCLE_REPOSITORY_URL}/tree/${CIRCLE_BRANCH}" \
          --arg repositoryUri "${CIRCLE_REPOSITORY_URL}" \
          --arg branchName "${CIRCLE_BRANCH}" \
          --arg workflowId "${CIRCLE_WORKFLOW_ID}" \
          --arg workflowUrl "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}" \
          --arg repoName "${CIRCLE_PROJECT_REPONAME}" \
          --arg pipelineDisplay "${CIRCLE_PROJECT_REPONAME}"  \
          --arg deployDisplay "#${CIRCLE_PIPELINE_NUMBER} - ${CIRCLE_JOB}"  \
          --arg description "${CIRCLE_PROJECT_REPONAME} #${CIRCLE_PIPELINE_NUMBER} ${CIRCLE_JOB} <<parameters.environment>>" \
          --arg envId "${CIRCLE_WORKFLOW_ID}-<<parameters.environment>>" \
          --arg envName "<<parameters.environment>>" \
          --arg envType "<<parameters.environment_type>>" \
          --argjson issueKeys "${ISSUE_KEYS}" \
          '
          ($time_str | tonumber) as $time_num |
          {
            "deployments": [
              {
                "schemaVersion": "1.0",
                "pipeline": {
                  "id": $repoName,
                  "displayName": $pipelineDisplay,
                  "url": $workflowUrl
                },
                "deploymentSequenceNumber": $pipelineNumber,
                "updateSequenceNumber": $time_str,
                "displayName": $deployDisplay,
                "description": $description,
                "url": $url,
                "state": $state,
                "lastUpdated": $lastUpdated,
                "associations": [
                  {
                    "associationType": "issueKeys",
                    "values": $issueKeys
                  },
                  {
                    "associationType": "serviceIdOrKeys",
                    "values": ["<< parameters.service_id >>"]
                  }
                ],
                "environment":{
                  "id": $envId,
                  "displayName": $envName,
                  "type": $envType
                }
              }
            ]
          }
          ' > /tmp/jira-status.json
        }


        post_to_jira () {
          TYPE=${1:-<<parameters.job_type>>}
          HTTP_STATUS=$(curl \
          -u "${<<parameters.token_name>>}:" \
          -s -w "%{http_code}" -o /tmp/curl_response.txt \
          -H "Content-Type: application/json" \
          -H "Accept: application/json" \
          -X POST "https://circleci.com/api/v1.1/project/${VCS_TYPE}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/jira/${TYPE}" --data @/tmp/jira-status.json)

          echo "Results from Jira: "
          if [ "${HTTP_STATUS}" != "200" ];then
            echo "Error calling Jira, result: ${HTTP_STATUS}" >&2
            jq '.' /tmp/curl_response.txt
            exit 0
          fi

          if jq -e '.acceptedBuilds[0]' /tmp/curl_response.txt > /dev/null || jq -e '.acceptedDeployments[0]' /tmp/curl_response.txt > /dev/null; then
            echo "Success!"
          else
            echo "No Jira keys associated with: ${ISSUE_KEYS}."
          fi
          jq '.' /tmp/curl_response.txt
        }


        # kick off
        source <<parameters.state_path>>
        run
        rm -f <<parameters.state_path>>
